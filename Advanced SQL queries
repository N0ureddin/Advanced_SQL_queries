--1.	Display the Department id, name and id and the name of its manager.
select dname ,dnum,fname,dno 
from Departments d ,Employee e
where ssn=MGRSSN

--2.	Display the name of the departments and the name of the projects under its control.
select dname,pname
from Departments d inner join  Project p
on d.Dnum=p.Dnum

--3.	Display the full data about all the dependence associated with the name of the employee they depend on him/her.
select fname,d.*
from Dependent d inner join Employee e
on ssn=ESSN

--4.	Display the Id, name and location of the projects in Cairo or Alex city.
select  pnumber,pname,plocation
from Project where city='cairo' or city='alex'

--5.	Display the Projects full data of the projects with a name starts with "a" letter.
select * from Project
where pname like 'a%'

--6.	display all the employees in department 30 whose salary from 1000 to 2000 LE monthly
select E.*
from Employee e inner join Departments d
on dnum=dno and dno=30 and Salary >=1000 and Salary<=2000

--7.	Retrieve the names of all employees in department 10 who works more than or equal10 hours per week on "AL Rabwah" project.
select e.*
from Employee e inner join Works_for w
on e.SSN=w.ESSn and e.dno=10
inner join Project
on  Pnumber=Pno and hours>=10 and Pname='Al Rabwah'

--8.	Find the names of the employees who directly supervised with Kamel Mohamed.
select x.fname as emp_name,y.fname+' '+y.Lname as super_name
from Employee x ,Employee y
where y.ssn=x.Superssn and y.Fname='kamel' and y.Lname='mohamed'

--9.	Retrieve the names of all employees and the names of the projects they are working on, sorted by the project name.
select fname,pname
from Employee inner join Departments d
on  Dnum=dno
inner join Project p
on d.Dnum=p.Dnum
order by Pname

--10.	For each project located in Cairo City , find the project number
--, the controlling department name ,the department manager last name ,address and birthdate.
select pnumber,dname,lname,address,bdate
from Project p inner join Departments d
on d.Dnum=p.Dnum and city='cairo'
inner join Employee
on ssn=MGRSSN

--11.	Display All Data of the mangers
select e.*
from Employee e inner join Departments d
on ssn=MGRSSN

--12.	Display All Employees data and the data of their dependents even if they have no dependents
select *
from Employee e left outer join Dependent
on ssn=essn

--1.	Insert your personal data to the employee table as a new employee
--in department number 30, SSN = 102672, Superssn = 112233, salary=3000.
insert into Employee
values('mahmoud','elshorbagy',102672,8/14/1995,'133-elshrouk','m',3000,112233,30)

--2.	Insert another employee with personal data your friend as new employee
--in department number 30, SSN = 102660, but don’t enter any value for salary or manager number to him.
insert into Employee(Fname,Lname,SSN,Bdate,Address,Sex,Dno)
values('ahmed','refaat',102660,8/20/1995,'zefta','m',30)

--3.	Upgrade your salary by 20 % of its last value.

update Employee 
set Salary=(Salary+.2*Salary)
where fname='mahmoud' and Lname='elshorbagy'

-------------------------------------------------------------------------
-------------------------------------------------------------------------
--1.	Display (Using Union Function)
--a.	 The name and the gender of the dependence that's gender is Female and depending on Female Employee.
--b.	 And the male dependence that depends on Male Employee.
select d.Dependent_name ,d.Sex
from Employee e inner join Dependent d
on e.ssn=d.ESSN and e.Sex='f' and d.Sex= 'f'
union
select d.Dependent_name ,d.Sex
from Employee e inner join Dependent d
on e.ssn=d.ESSN and e.Sex='m' and d.Sex= 'm'

--2.	For each project, list the project name and the total hours per week (for all employees) spent on that project.
select pname,sum(hours) as total_hours
from Project ,Works_for
where Pnumber=pno
group by pname

--3.	Display the data of the department which has the smallest employee ID over all employees' ID.
select d.*
from Departments d ,Employee e
where d.dnum=e.dno and ssn =( select min(ssn) from Employee e)

--4.	For each department, retrieve the department name and the maximum, minimum and average salary of its employees.
select min(salary) as min_val,max(salary) as max_value,avg(salary) as avg_val ,dname
from Employee e,Departments d
where d.Dnum=e.Dno
group by Dname

--5.	List the last name of all managers who have no dependents.
select distinct lname
from Employee inner join Departments
on ssn=MGRSSN
left join Dependent
on ssn=ESSN 
where essn is null

--6.	For each department-- if its average salary is less than the average salary of all employees
-- display its number, name and number of its employees
select dnum,dname,count(ssn) as count_of_emp
from Employee,Departments
where dnum=dno
group by dnum ,dname
having avg(Salary)<(select AVG(salary) from Employee)

--7.	Retrieve a list of employees and the projects they are working on ordered by department and within each department
    --, ordered alphabetically by last name, first name.
	select fname,lname,pname
	from Employee inner join Departments d
	on dnum=dno
	inner join Project p
	on d.Dnum=p.Dnum
	order by d.dnum,Lname,Fname

	--8.	Try to get the max 2 salaries using subquery
select  top 2(salary)
from employee
order by salary desc

select max(salary)
from Employee
union all
select max(salary)
from Employee
where salary not in (select max(salary)from Employee)




--9.	Get the full name of employees that is similar to any dependent name

select concat (fname,' ',lname)as full_name
from Employee
intersect
select  Dependent_name
from Dependent

--10.	Try to update all salaries of employees who work in Project ‘Al Rabwah’ by 30% 
update Employee 
set Salary+=(.3*Salary)
from Employee,Works_for,Project
where ssn=ESSn and Pnumber=pno and Pname='al rabwah'

--1.	In the department table insert new department called "DEPT IT" ,
--with id 100, employee with SSN = 112233 as a manager for this department. The start date for this manager is '1-11-2006'

insert into Departments
values('DEPT IT',100,112233,11/1/2006)

--2.	Do what is required if you know that : Mrs.Noha Mohamed(SSN=968574)  moved to be the manager of the new department (id = 100),
-- and they give you(your SSN =102672) her position (Dept. 20 manager) 

--a.	First try to update her record in the department table
--b.	Update your record to be department 20 manager.
--c.	Update the data of employee number=102660 to be in your teamwork (he will be supervised by you) (your SSN =102672)

update Departments set MGRSSN =968574 where dnum=100;

update Departments set MGRSSN =102672 where dnum=20;

update Employee set Superssn=102672 where ssn=102660;

--3.	Unfortunately the company ended the contract with Mr. Kamel Mohamed (SSN=223344) so try to delete his data from your database in case you know that
-- you will be temporarily in his position.
--Hint: (Check if Mr. Kamel has dependents, works as a department manager, supervises any employees or works in any projects and handle these cases).
delete Dependent where ESSN=223344
delete Works_for where ESSN=223344

update Departments set MGRSSN=102672 where MGRSSN=223344;

update Employee set Superssn = 102672  where Superssn=223344;

delete Employee where SSN=223344

--1.	Retrieve number of students who have a value in their age. 
select COUNT(st_age) as number_of_st_not_null
from Student
--where St_Age is not null

--2.	Get all instructors Names without repetition
select distinct ins_name
from Instructor

--3.	Display student with the following Format (use isNull function)
       --  Student ID	Student Full Name	Department name
		select isnull(st_id,' no data') asStudend_ID,isnull(st_fname+' '+st_lname,'no data ') as full_name,isnull(dept_name,' no data') as department_name
		from Student s,Department d
		where d.Dept_Id=s.Dept_Id

--4.	Display instructor Name and Department Name 
 --Note: display all the instructors if they are attached to a department or not
 select dept_name,ins_name
 from Instructor i left outer join Department d
 on d.Dept_Id=i.Dept_Id
 
 --5.	Display student full name and the name of the course he is taking
       --For only courses which have a grade
	   select st_fname+' '+st_lname as full_name ,crs_name
	   from Student s,Stud_Course sc,Course c
	   where s.St_Id=sc.St_Id and c.Crs_Id=sc.Crs_Id and Grade is not null

--6.	Display number of courses for each topic name
        select COUNT(crs_id) as n_courses,top_name
		from Course c inner join Topic t
		on t.Top_Id=c.Top_Id
		group by Top_Name

		--7.	Display max and min salary for instructors
		select max(salary) as max_val ,min(salary) as min_val
		from Instructor

		--8.	Display instructors who have salaries less than the average salary of all instructors.
		select ins_name
		from Instructor
		where salary < (select avg(salary) from Instructor)

		--9.	Display the Department name that contains the instructor who receives the minimum salary.
		select dept_name
		from Instructor i inner join Department d
		on d.Dept_Id=i.Dept_Id and Salary=(select min(Salary) from Instructor)

		select top 1 dept_name
		from Instructor i inner join Department d
		on d.Dept_Id=i.Dept_Id 
		order by Salary 

		--10.	 Select max two salaries in instructor table. 
		select top 2 Salary
		from Instructor
		order by salary desc

		--11 Select instructor name and his salary but if there is no salary display instructor bonus.
		-- “use one of coalesce Function”

		select ins_name ,coalesce(convert( varchar(20),salary),'bounas')
		from Instructor 
		--12.	Select Average Salary for instructors 
		select avg(salary) as avg_val
		from Instructor

		--13.	Select Student first name and the data of his supervisor 
		select x.st_fname,y.*
		from Student x,Student y
		where y.St_id=x.St_super

		--14.	Write a query to select the highest two salaries in Each Department for instructors
		-- who have salaries. “using one of Ranking Functions”
		select * 
		from (
		select *,ROW_NUMBER() over(partition by dept_id order by salary desc)as max_sal
		from Instructor i)
		as new
		where max_sal<=2

		--15.	 Write a query to select a random  student from each department.  “using one of Ranking Functions”
		select * from(
		select  *,ROW_NUMBER() over(partition by dept_id order by newid()) as random
		from Student)as new
		where random=1
--------------------------------------------------------------------------------------------------------------------------------------------\
-----------------adven---------------
--1.	Display the SalesOrderID, ShipDate of the SalesOrderHearder table (Sales schema)
-- to designate SalesOrders that occurred within the period ‘7/28/2002’ and ‘7/29/2014’
select salesorderid,shipdate
from Sales.SalesOrderHeader
where  OrderDate between '7/28/2002' and '7/29/2014'

--2.	Display only Products(Production schema) with a StandardCost below $110.00 (show ProductID, Name only)
select productid,name
from Production.Product
where StandardCost<110

--3.	Display ProductID, Name if its weight is unknown
select productid,name
from Production.Product
where Weight is null

--4.	 Display all Products with a Silver, Black, or Red Color

select *
from Production.Product
where color in ('silver','black','red')

--5.	 Display any Product with a Name starting with the letter B
select *
from Production.Product
where name like 'b%'

--6.	Run the following Query
--UPDATE Production.ProductDescription
--SET Description = 'Chromoly steel_High of defects'
--WHERE ProductDescriptionID = 3
--Then write a query that displays any Product description with underscore value in its description.
UPDATE Production.ProductDescription
SET Description = 'Chromoly steel_High of defects'
WHERE ProductDescriptionID = 3

select * 
from Production.ProductDescription
where Description like '%[_]%'

--7.	Calculate sum of TotalDue for each OrderDate in Sales.
--SalesOrderHeader table for the period between  '7/1/2001' and '7/31/2014'
select sum(totaldue) as sum_total,orderdate
from sales.SalesOrderHeader
where OrderDate between '7/1/2001'and'7/31/2014'
group by OrderDate

--8.	 Display the Employees HireDate (note no repeated values are allowed)

select distinct hiredate
from HumanResources.Employee

--9.	 Calculate the average of the unique ListPrices in the Product table

select avg(distinct listprice) as unique_avg
from Production.Product

--10.	Display the Product Name and its ListPrice within the values of 100 and 120 the list should has 
--the following format "The [product name] is only! [List price]" (the list will be sorted according to its ListPrice value)
select concat('the [',name ,'] is only!',' [',listprice,']') as product_name_price
from Production.Product
where ListPrice between 100 and 120
order by ListPrice

--a)	 Transfer the rowguid ,Name, SalesPersonID, Demographics from Sales.Store table  in a newly created table named [store_Archive]
--Note: Check your database to see the new table and how many rows in it?
--b)	Try the previous query but without transferring the data? 
select *into store_Archive
from Sales.Store
select *into store_Archivee
from Sales.Store
where 1=2

--1.	 Create a scalar function that takes date and returns Month name of that date.
create function get_month_name(@date date)
returns varchar(20)
begin
 declare @monthnam varchar(20)
 if month(@date)=1
  select @monthnam = 'jan'
   if month(@date)=2
  select @monthnam = 'feb'
   if month(@date)=3
  select @monthnam = 'mar'
   if month(@date)=4
  select @monthnam = 'apr'
   if month(@date)=5
  select @monthnam = 'may'
   if month(@date)=6
  select @monthnam = 'jun'
   if month(@date)=7
  select @monthnam = 'jal'
   if month(@date)=8
  select @monthnam = 'aug'
   if month(@date)=9
  select @monthnam = 'sep'
   if month(@date)=10
  select @monthnam = 'oct'
   if month(@date)=11
  select @monthnam = 'nov'
   if month(@date)=12
  select @monthnam = 'dec'

   return @monthnam
end

select dbo.get_month_name('5-1-2010')
-----------------------------------------------
create function get_name_month(@date date)
returns varchar(20)
begin
declare @name varchar(20)
select @name= (format(@date,'MMMM') )
return @name
end
select dbo.get_name_month('3/5/2010')


--2.	 Create a multi-statements table-valued function that takes 2 integers and returns the values between them.
create function getvalue_between(@x int,@y int)
returns @t table
         (val int)
          as
              begin
              declare @midel int = @x+1
              while  @midel<@y 
              begin
              insert into @t select @midel
              select @midel+=1
              end
              return
              end
          select*from dbo.getvalue_between(5,10) 
		  
--3  Create a tabled valued function that takes Student No and returns Department Name with Student full name.
     create function getinfo(@id int)
	 returns table
	 as
	 return
	 (
	 select Dept_Name,S.St_Fname+' '+s.St_Lname as fullname
	 from Department d,Student s
	 where d.Dept_Id=s.Dept_Id and St_Id=@id
	 
	 )
	 select *from getinfo(10)

	 --4.	Create a scalar function that takes Student ID and returns a message to user 
--a.	If first name and Last name are null then display 'First name & last name are null'
---b.	If First name is null then display 'first name is null'
--c.	If Last name is null then display 'last name is null'
--d.	Else display 'First name & last name are not null'

create function mesage(@sid int)
returns varchar(30)
begin
declare @messagee varchar(50)
declare @firstname varchar(20)
declare @lastname varchar(20)
select @firstname=st_fname from Student where St_Id=@sid
select @lastname=St_Lname from Student where St_Id=@sid
if @firstname is null and @lastname is null
select @messagee= 'First name & last name are null'
if @firstname is null
select @messagee= 'First name is null'
if @lastname is null
select @messagee= 'last name is null'
else
select @messagee= 'First name & last name are not null'
return @messagee
end

select dbo.mesage(50)

--5.	Create a function that takes integer which represents manager ID and
------displays department name, Manager Name and hiring date 
alter function managerdata (@idm int)
returns table
as
return
(
select ins_name,dept_name,manager_hiredate
from Instructor i,Department d
where i.Ins_Id=d.Dept_Manager and d.Dept_Manager=@idm
)

select* from managerdata(2)

--6.	Create multi-statements table-valued function that takes a string
--If string='first name' returns student first name
--If string='last name' returns student last name 
--If string='full name' returns Full Name from student table 
--Note: Use “ISNULL” function
create function stdname(@name varchar(20))
returns @t table
(
name varchar(30)
)
as  begin
if @name='first name'
insert into @t
select ISNULL(st_fname,' ')from Student
else if @name='last name'
insert into @t
select ISNULL(St_Lname,' ')from Student
else if @name='full name'
insert into @t
select ISNULL(St_Fname+' '+St_Lname,' ')from Student
return
end
select * from stdname('full name')

--7.	Write a query that returns the Student No and Student first name without the last char

alter function stdata()
returns table
as return
         (
		 select st_id,st_fname,LEFT(St_Fname,len(St_Fname)-1) as newdata from Student
		 )
select *from stdata()

--1.	 Create a view that displays student full name, course name if the student has a grade more than 50. 
create view stddata 
as 
select st_fname+' '+st_lname as fullname,crs_name
from Student s inner join Stud_Course stc
on s.St_Id=stc.St_Id
inner join Course c
on c.Crs_Id=stc.Crs_Id and grade>50

select *from stddata

--2.	 Create an Encrypted view that displays manager names and the topics they teach. 
alter view insdata
with encryption
as
select ins_name as mangername,crs_name as topicname
from Instructor i,Department d,Ins_Course ic,Course c
where i.Ins_Id=d.Dept_Manager and i.Ins_Id=ic.Ins_Id and c.Crs_Id=ic.Crs_Id

select*from insdata

--3.	Create a view that will display Instructor Name, Department Name for the ‘SD’ or ‘Java’ Department-
     -- “use Schema binding” and describe what is the meaning of Schema Binding

	 --This means that the underlying tables and views cannot be modified in a way that would affect the definition of the schema-bound object.
	 -- It also means that the underlying objects cannot be dropped.

	 create view dbo.inamedep
	 WITH
       SCHEMABINDING
	   as
	   select ins_name,dept_name
	   from dbo.Instructor i inner join dbo.Department d
	   on d.Dept_Id=i.Dept_Id and d.Dept_Name in ('sd','java')

	   select*from dbo.inamedep

	   --Create a view “V1” that displays student data for student who lives in Alex or Cairo. 
       --Note: Prevent the users to run the following query 
       --Update V1 set st_address=’tanta’
       --Where st_address=’alex’;
	   create view v1 
	   as
	   select *from Student where St_Address in ('alex','cairo')
	   with check option

--5.	Create index on column (Hiredate) that allow u to cluster the data in table Department. What will happen?
	   create clustered index hire
        on department (manager_hiredate)
		--there were already cluster on the primary key so wew can make nonclustered index or drop the existing and make our cluster

--6.	Create index that allow u to enter unique ages in student table. What will happen?

		create unique index stage
        on student(st_age)
		-- icannot make it as there were repeating ages 

--7.	Create temporary table [Session based] on Company DB to save employee name and his today task.

		Create table #emp
         (
          ename varchar(20),
          etask varchar(20)
          )

 --8.	Create a view that will display the project name and the number of employees work on it. “Use Company DB”

		  create view pnum
		  as
		  select count(essn) as numofemp,p.Pname
		  from Project p ,Works_for w
		  where p.Pnumber=w.Pno
		  group by p.Pname

		  select *from pnum

 --9.	Using Merge statement between the following two tables [User ID, Transaction Amount]

		  create table tlast
		  (
		  userid int primary key,
		  tamount int
		  )
		  insert into tlast values(1,4000),(4,2000),(2,10000)
		  create table tdaliy
		  (
		  userid int primary key,
		  tamount int
		  )
		  insert into tdaliy values(1,1000),(2,2000),(3,1000)

		  merge into tlast as l
		  using tdaliy as d

		  on l.userid=d.userid
		  when matched then
		  update set l.tamount=d.tamount
		  when not matched by source then delete;

		  select*from tlast

 --1)	Create view named   “v_clerk” that will display employee#,project#, 
		  --the date of hiring of all the jobs of the type 'Clerk'.
		 create view v_clerk
		 as
		 select ssn,Pnumber,[MGRStart Date]
		 from Employee e inner join Departments d
		 on  e.SSN=d.MGRSSN
		 inner join Project p
		 on d.Dnum=p.Dnum and job='clerk'

		 select *from v_clerk

		 --
--2)	 Create view named  “v_without_budget” that will display all the projects data 
--       without budget
create view v_without_budget
as
select p.City,p.Dnum,p.Plocation,p.Pname,p.Pnumber from Project p

select * from v_without_budget	

--3)	Create view named  “v_count “ that will display the project name and the # of jobs in it
create view v_count 
as
select pname,count(job) as numofjobs
from Project p,Departments d
where d.Dnum=p.Dnum
group by Pname

select *from v_count

--4)	 Create view named ” v_project_p2” that will display the emp# s for the project# ‘p2’
---------use the previously created view  “v_clerk”
create view v_project_p2
as
select count(SSN)
from v_clerk where Pname='p2'

select*from v_project_p2

--5)	modifey the view named  “v_without_budget”  to display all DATA in project p1 and p2 
alter view v_without_budget
as
select p.City,p.Dnum,p.Plocation,p.Pname,p.Pnumber from Project p
where Pname in ('p1','p2')

select * from v_without_budget	

--6)	Delete the views  “v_ clerk” and “v_count”
drop view v_count
drop view v_clerk

--7)	Create view that will display the emp# and emp lastname who works on dept# is ‘d2’
alter view dep2
as
select Lname, count(ssn) as numbers from
Employee e,Departments d
where d.Dnum=e.Dno and d.Dname='dp2'
group by Lname

select lname from dep2

--8)	Display the employee  lastname that contains letter “J”
--------Use the previous view created in Q#7
select lname from dep2 where lname like '%j%'

--9)	Create view named “v_dept” that will display the department# and department name
alter view v_dept(dname,dnum)
as
select dname,dnum
from Departments

select * from v_dept

--10)	using the previous view try enter new department data where dept# is ’d4’ and dept name is ‘Development’

insert into v_dept(dname,dnum)
values('development','p4')

--11)	Create view name “v_2006_check” that will display employee#, 
--the project #where he works and the date of joining the project which must be from
-- the first of January and the last of December 2006.this view will be used to insert data so
-- make sure that the coming
-- new data must match the condition
alter view v_2006_check(empno,projectn,edate)
as
select empno,projectno,enter_date
from works_on where enter_date between '1-1-2006'and'12-31-2006'
with check option


select * from v_2006_check

--1.	Display all the data from the Employee table (HumanResources Schema) 
--As an XML document “Use XML Raw”. “Use Adventure works DB” 
--A)	Elements
--B)	Attributes

select * from HumanResources.employee
for xml raw('employee'),elements,root('employees')


--2.	Display Each Department Name with its instructors. “Use ITI DB”
--A)	Use XML Auto
--B)	Use XML Path

select dept_name ,ins_name 
from instructor,Department
where instructor.dept_id=Department.dept_id
for xml auto

select dept_name "@department" ,ins_name "instructor" 
from instructor,Department
where instructor.dept_id=Department.dept_id
for xml path('employee')





declare @docs xml ='<customers>
              <customer FirstName="Bob" Zipcode="91126">
                     <order ID="12221">Laptop</order>
              </customer>
              <customer FirstName="Judy" Zipcode="23235">
                     <order ID="12221">Workstation</order>
              </customer>
              <customer FirstName="Howard" Zipcode="20009">
                     <order ID="3331122">Laptop</order>
              </customer>
              <customer FirstName="Mary" Zipcode="12345">
                     <order ID="555555">Server</order>
              </customer>
       </customers>'

	   declare @hdocs int
	   exec sp_xml_preparedocument @hdocs output , @docs
	   select * from 
	   openxml(@hdocs,'//customer')
	   with(c_name varchar(max) '@FirstName',

	   zip_code int '@Zipcode',
	   order_id int 'order/@ID',
	   orders varchar(max) 'order'
	   )

	   exec sp_xml_removedocument @hdocs


	   
--4.	Create a stored procedure to show the number of students per department.[use ITI DB] 
create proc students 
as
select Dept_Name as 'department' ,count(st_id)
from student s INNER JOIN Department d
ON s.Dept_Id=d.Dept_Id
group by (Dept_Name)


students


--5.Create a stored procedure that will check
--for the # of employees in the project p1 if
--they are more than 3 print message to the user
--“'The number of employees in the project p1 is
--3 or more'” if they are less display a message
--to the user “'The following employees work for
--the project p1'” in addition to the first name 
--and last name of each one. [Company DB] 
use [SD32-Company]
create proc num_emp
as
declare @x int
select @x=count(emp_no)
from hr.employee e inner join  works_on w
on e.emp_no= w.empno and  projectno='p1'

if (@x>=3)
select 'The number of employees in the project p1 is 3 or more'
else 
select 'The following employees work for the project p1',' '
union
select emp_fname ,emp_lname
from hr.employee e inner join  works_on w
on e.emp_no= w.empno and  projectno='p1'


num_emp


--6.	Create a stored procedure that will be used in case
--there is an old employee has left the project and a new 
--one become instead of him. The procedure should take 3
--parameters (old Emp. number, new Emp. number and the 
--project number) and it will be used to update works_on
--table. [Company DB]




-----------------------------------
create proc employee @new_id int ,@projectno varchar(max),@old_id int 
as 
update works_on set empno=@new_id,projectno=@projectno
where empno=@old_id

employee 5,p2,1
--7.	Create an Audit table with the following structure 
--ProjectNo 	UserName 	ModifiedDate 	Budget_Old 
--Budget_New 
--p2 	Dbo 	2008-01-31	95000 	200000 

--This table will be used to audit the update trials
--on the Budget column (Project table, Company DB)
--Example:
--If a user updated the budget column then the project 
--number, user name that made that update, the date of 
--the modification and the value of the old and the new
--budget will be inserted into the Audit table
--Note: This process will take place only if the user 
--updated the budget column

create table history
(
projectno varchar(max),
username varchar (max),
ModifiedDate  date,
Budget_Old  int,
Budget_New  int

)
create trigger t1
on company.project
for update 
as
if update(projectno)
begin
declare  @pronum varchar(max),@bold int,@bnew int
select @pronum=projectno  from inserted
select @bnew=budget   from inserted
select @bold=budget   from deleted
insert into history values(@pronum,suser_name(),getdate(),@bold,@bnew)
end


update company.project set projectno='p3',projectname='new' ,budget=5000 where projectno='p3'

--8.Create a trigger to prevent anyone from inserting a new 
--record in the Department table [ITI DB]
--“Print a message for user to tell him that he can’t
--insert a new record in that table”

create trigger t2 
on company.department
instead of insert
as
select 'can’t insert a new record in that table'


insert into COMPANY.Department values('d5','sales','NY')



--Create a trigger that prevents the insertion Process
--for Employee table in March [Company DB].
create trigger t3
on hr.employee 
after  insert
as
if (format(getdate(),'MMMM') = 'November')
begin
SELECT' YOU CANNOT INSERT IN November'
delete from hr.employee where emp_no=(select emp_no from inserted)
end

--10. Create a trigger that prevents users from altering
--any table in Company DB.

CREATE TRIGGER t4 
ON DATABASE 
FOR ALTER_TABLE 
AS 
 PRINT 'you can not alter' 
 ROLLBACK;
 
-- DISABLE TRIGGER ALL
--ON DATABASE ;

 drop trigger t4
 alter table works_on add  newc int;

 --11.Create a trigger on student table after insert to
 --add Row in Student Audit table
 --(Server User Name , Date, Note) where note will be 
 --“[username] Insert New Row with Key=[Key Value] 
 --in table [table name]”

 create table student_audit
 (
 server_username varchar(50),
 datee date,
 note varchar(50)
 )

 create trigger st_audit
 on student
 after insert 
 as
 declare @x int
 select  @x =st_id from inserted
 insert into student_audit

 values(suser_name(),getdate(),@x)
 --12.	 Create a trigger on student table instead of delete to add Row in Student Audit table (Server User Name, Date, Note) where note will be“ try to delete Row with Key=[Key Value]”
 create trigger st_audit2
 on student
 instead of delete  
 as
 declare @x int
 select  @x =st_id from inserted
 insert into student_audit

 values(suser_name(),getdate(),@x)


 
 )
















	   










